/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.training.amf.newsletter.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import com.liferay.training.amf.newsletter.model.ArticleAuthor;
import com.liferay.training.amf.newsletter.model.ArticleAuthorModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ArticleAuthor service. Represents a row in the &quot;AMF_ArticleAuthor&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ArticleAuthorModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ArticleAuthorImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ArticleAuthorImpl
 * @see ArticleAuthor
 * @see ArticleAuthorModel
 * @generated
 */
@ProviderType
public class ArticleAuthorModelImpl extends BaseModelImpl<ArticleAuthor>
	implements ArticleAuthorModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a article author model instance should use the {@link ArticleAuthor} interface instead.
	 */
	public static final String TABLE_NAME = "AMF_ArticleAuthor";
	public static final Object[][] TABLE_COLUMNS = {
			{ "articleAuthorId", Types.BIGINT },
			{ "articlePk", Types.BIGINT },
			{ "authorPk", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("articleAuthorId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("articlePk", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("authorPk", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table AMF_ArticleAuthor (articleAuthorId LONG not null primary key,articlePk LONG,authorPk LONG)";
	public static final String TABLE_SQL_DROP = "drop table AMF_ArticleAuthor";
	public static final String ORDER_BY_JPQL = " ORDER BY articleAuthor.articleAuthorId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY AMF_ArticleAuthor.articleAuthorId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.training.amf.newsletter.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.training.amf.newsletter.model.ArticleAuthor"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.training.amf.newsletter.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.training.amf.newsletter.model.ArticleAuthor"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.training.amf.newsletter.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.training.amf.newsletter.model.ArticleAuthor"));

	public ArticleAuthorModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _articleAuthorId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setArticleAuthorId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _articleAuthorId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ArticleAuthor.class;
	}

	@Override
	public String getModelClassName() {
		return ArticleAuthor.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("articleAuthorId", getArticleAuthorId());
		attributes.put("articlePk", getArticlePk());
		attributes.put("authorPk", getAuthorPk());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long articleAuthorId = (Long)attributes.get("articleAuthorId");

		if (articleAuthorId != null) {
			setArticleAuthorId(articleAuthorId);
		}

		Long articlePk = (Long)attributes.get("articlePk");

		if (articlePk != null) {
			setArticlePk(articlePk);
		}

		Long authorPk = (Long)attributes.get("authorPk");

		if (authorPk != null) {
			setAuthorPk(authorPk);
		}
	}

	@Override
	public long getArticleAuthorId() {
		return _articleAuthorId;
	}

	@Override
	public void setArticleAuthorId(long articleAuthorId) {
		_articleAuthorId = articleAuthorId;
	}

	@Override
	public long getArticlePk() {
		return _articlePk;
	}

	@Override
	public void setArticlePk(long articlePk) {
		_articlePk = articlePk;
	}

	@Override
	public long getAuthorPk() {
		return _authorPk;
	}

	@Override
	public void setAuthorPk(long authorPk) {
		_authorPk = authorPk;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ArticleAuthor.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ArticleAuthor toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ArticleAuthor)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ArticleAuthorImpl articleAuthorImpl = new ArticleAuthorImpl();

		articleAuthorImpl.setArticleAuthorId(getArticleAuthorId());
		articleAuthorImpl.setArticlePk(getArticlePk());
		articleAuthorImpl.setAuthorPk(getAuthorPk());

		articleAuthorImpl.resetOriginalValues();

		return articleAuthorImpl;
	}

	@Override
	public int compareTo(ArticleAuthor articleAuthor) {
		long primaryKey = articleAuthor.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ArticleAuthor)) {
			return false;
		}

		ArticleAuthor articleAuthor = (ArticleAuthor)obj;

		long primaryKey = articleAuthor.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ArticleAuthor> toCacheModel() {
		ArticleAuthorCacheModel articleAuthorCacheModel = new ArticleAuthorCacheModel();

		articleAuthorCacheModel.articleAuthorId = getArticleAuthorId();

		articleAuthorCacheModel.articlePk = getArticlePk();

		articleAuthorCacheModel.authorPk = getAuthorPk();

		return articleAuthorCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{articleAuthorId=");
		sb.append(getArticleAuthorId());
		sb.append(", articlePk=");
		sb.append(getArticlePk());
		sb.append(", authorPk=");
		sb.append(getAuthorPk());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.liferay.training.amf.newsletter.model.ArticleAuthor");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>articleAuthorId</column-name><column-value><![CDATA[");
		sb.append(getArticleAuthorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>articlePk</column-name><column-value><![CDATA[");
		sb.append(getArticlePk());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>authorPk</column-name><column-value><![CDATA[");
		sb.append(getAuthorPk());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ArticleAuthor.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ArticleAuthor.class, ModelWrapper.class
		};
	private long _articleAuthorId;
	private long _articlePk;
	private long _authorPk;
	private ArticleAuthor _escapedModel;
}