/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.training.amf.monitor.model;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.service.ServiceContext;

import java.io.Serializable;

import java.util.Date;

/**
 * The base model interface for the AdminMonitor service. Represents a row in the &quot;AMF_AdminMonitor&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.liferay.training.amf.monitor.model.impl.AdminMonitorModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.liferay.training.amf.monitor.model.impl.AdminMonitorImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AdminMonitor
 * @see com.liferay.training.amf.monitor.model.impl.AdminMonitorImpl
 * @see com.liferay.training.amf.monitor.model.impl.AdminMonitorModelImpl
 * @generated
 */
@ProviderType
public interface AdminMonitorModel extends BaseModel<AdminMonitor> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a admin monitor model instance should use the {@link AdminMonitor} interface instead.
	 */

	/**
	 * Returns the primary key of this admin monitor.
	 *
	 * @return the primary key of this admin monitor
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this admin monitor.
	 *
	 * @param primaryKey the primary key of this admin monitor
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the monitor ID of this admin monitor.
	 *
	 * @return the monitor ID of this admin monitor
	 */
	public long getMonitorId();

	/**
	 * Sets the monitor ID of this admin monitor.
	 *
	 * @param monitorId the monitor ID of this admin monitor
	 */
	public void setMonitorId(long monitorId);

	/**
	 * Returns the date time of this admin monitor.
	 *
	 * @return the date time of this admin monitor
	 */
	public Date getDateTime();

	/**
	 * Sets the date time of this admin monitor.
	 *
	 * @param dateTime the date time of this admin monitor
	 */
	public void setDateTime(Date dateTime);

	/**
	 * Returns the event type of this admin monitor.
	 *
	 * @return the event type of this admin monitor
	 */
	@AutoEscape
	public String getEventType();

	/**
	 * Sets the event type of this admin monitor.
	 *
	 * @param eventType the event type of this admin monitor
	 */
	public void setEventType(String eventType);

	/**
	 * Returns the user ID of this admin monitor.
	 *
	 * @return the user ID of this admin monitor
	 */
	public long getUserId();

	/**
	 * Sets the user ID of this admin monitor.
	 *
	 * @param userId the user ID of this admin monitor
	 */
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this admin monitor.
	 *
	 * @return the user uuid of this admin monitor
	 */
	public String getUserUuid();

	/**
	 * Sets the user uuid of this admin monitor.
	 *
	 * @param userUuid the user uuid of this admin monitor
	 */
	public void setUserUuid(String userUuid);

	/**
	 * Returns the ip address of this admin monitor.
	 *
	 * @return the ip address of this admin monitor
	 */
	@AutoEscape
	public String getIpAddress();

	/**
	 * Sets the ip address of this admin monitor.
	 *
	 * @param ipAddress the ip address of this admin monitor
	 */
	public void setIpAddress(String ipAddress);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public Object clone();

	@Override
	public int compareTo(AdminMonitor adminMonitor);

	@Override
	public int hashCode();

	@Override
	public CacheModel<AdminMonitor> toCacheModel();

	@Override
	public AdminMonitor toEscapedModel();

	@Override
	public AdminMonitor toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}